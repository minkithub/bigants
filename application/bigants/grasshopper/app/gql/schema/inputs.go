// Code generated by scripts/gqlgen2/gen.go. DO NOT EDIT.
package schema

import (
	"encoding/json"

	"github.com/graph-gophers/graphql-go"
)

type MutationEchoArgs struct {
	Input *string `json:"input"`
}

type MutationPredictionCreateArgs struct {
	Input PredictionCreateInput `json:"input"`
}

type PredictionCreateInput struct {
	ClientMutationID *graphql.ID `json:"client_mutation_id"`
	StockID          graphql.ID  `json:"stock_id"`
	Holidays         []string    `json:"holidays"`
}

type QueryStocksArgs struct {
	First  *int32  `json:"first"`
	After  *string `json:"after"`
	Last   *int32  `json:"last"`
	Before *string `json:"before"`
	Q      *string `json:"q"`
}

type QueryNodeArgs struct {
	ID *graphql.ID `json:"id"`
}

type StockHistoryArgs struct {
	Count *int32 `json:"count"`
}

type UserPredictionsArgs struct {
	First  *int32  `json:"first"`
	After  *string `json:"after"`
	Last   *int32  `json:"last"`
	Before *string `json:"before"`
}

func (i *MutationEchoArgs) Key() interface{} {
	type key string
	b, _ := json.Marshal(i)
	return key(string(b))
}

func (i *MutationEchoArgs) MarshalJSON() ([]byte, error) {
	return json.Marshal([]interface{}{i.Input})
}

func (i *MutationPredictionCreateArgs) Key() interface{} {
	type key string
	b, _ := json.Marshal(i)
	return key(string(b))
}

func (i *MutationPredictionCreateArgs) MarshalJSON() ([]byte, error) {
	return json.Marshal([]interface{}{i.Input})
}

func (i *PredictionCreateInput) Key() interface{} {
	type key string
	b, _ := json.Marshal(i)
	return key(string(b))
}

func (i *PredictionCreateInput) MarshalJSON() ([]byte, error) {
	return json.Marshal([]interface{}{i.ClientMutationID, i.StockID, i.Holidays})
}

func (i *QueryStocksArgs) Key() interface{} {
	type key string
	b, _ := json.Marshal(i)
	return key(string(b))
}

func (i *QueryStocksArgs) MarshalJSON() ([]byte, error) {
	return json.Marshal([]interface{}{i.First, i.After, i.Last, i.Before, i.Q})
}

func (i *QueryNodeArgs) Key() interface{} {
	type key string
	b, _ := json.Marshal(i)
	return key(string(b))
}

func (i *QueryNodeArgs) MarshalJSON() ([]byte, error) {
	return json.Marshal([]interface{}{i.ID})
}

func (i *StockHistoryArgs) Key() interface{} {
	type key string
	b, _ := json.Marshal(i)
	return key(string(b))
}

func (i *StockHistoryArgs) MarshalJSON() ([]byte, error) {
	return json.Marshal([]interface{}{i.Count})
}

func (i *UserPredictionsArgs) Key() interface{} {
	type key string
	b, _ := json.Marshal(i)
	return key(string(b))
}

func (i *UserPredictionsArgs) MarshalJSON() ([]byte, error) {
	return json.Marshal([]interface{}{i.First, i.After, i.Last, i.Before})
}

var _ = graphql.ID("")
